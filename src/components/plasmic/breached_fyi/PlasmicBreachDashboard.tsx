// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ovAn54zzW4KPDWAdpESGfB
// Component: lrhV9N5C2_

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Select from "../../Select"; // plasmic-import: 6L7UEbA1yg8/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_breached_fyi.module.css"; // plasmic-import: ovAn54zzW4KPDWAdpESGfB/projectcss
import sty from "./PlasmicBreachDashboard.module.css"; // plasmic-import: lrhV9N5C2_/css

export type PlasmicBreachDashboard__VariantMembers = {};
export type PlasmicBreachDashboard__VariantsArgs = {};
type VariantPropType = keyof PlasmicBreachDashboard__VariantsArgs;
export const PlasmicBreachDashboard__VariantProps =
  new Array<VariantPropType>();

export type PlasmicBreachDashboard__ArgsType = {};
type ArgPropType = keyof PlasmicBreachDashboard__ArgsType;
export const PlasmicBreachDashboard__ArgProps = new Array<ArgPropType>();

export type PlasmicBreachDashboard__OverridesType = {
  breachDashboard?: p.Flex<"div">;
  text?: p.Flex<"div">;
  select?: p.Flex<typeof Select>;
};

export interface DefaultBreachDashboardProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicBreachDashboard__RenderFunc(props: {
  variants: PlasmicBreachDashboard__VariantsArgs;
  args: PlasmicBreachDashboard__ArgsType;
  overrides: PlasmicBreachDashboard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"breachDashboard"}
          data-plasmic-override={overrides.breachDashboard}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.breachDashboard
          )}
        >
          <section className={classNames(projectcss.all, sty.section__zoIFf)}>
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              {"insecure.fyi"}
            </div>
          </section>
          <section className={classNames(projectcss.all, sty.section__mx54O)}>
            <Select
              data-plasmic-name={"select"}
              data-plasmic-override={overrides.select}
              className={classNames("__wab_instance", sty.select)}
              onChange={async (...eventArgs) => {
                ((...eventArgs) => {
                  p.generateStateOnChangeProp($state, ["select", "value"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);
                (async value => {
                  const $steps = {};
                  $steps["runInteractionProp"] = true
                    ? (() => {
                        const actionArgs = {};
                        return __wrapUserFunction(
                          {
                            type: "InteractionLoc",
                            actionName: "invokeEventHandler",
                            interactionUuid: "o-ttDUxqw",
                            componentUuid: "lrhV9N5C2_"
                          },
                          () =>
                            (({ eventRef, args }) => {
                              return eventRef?.(...(args ?? []));
                            })?.apply(null, [actionArgs]),
                          actionArgs
                        );
                      })()
                    : undefined;
                  if (
                    typeof $steps["runInteractionProp"] === "object" &&
                    typeof $steps["runInteractionProp"].then === "function"
                  ) {
                    $steps["runInteractionProp"] = await __wrapUserPromise(
                      {
                        type: "InteractionLoc",
                        actionName: "invokeEventHandler",
                        interactionUuid: "o-ttDUxqw",
                        componentUuid: "lrhV9N5C2_"
                      },
                      $steps["runInteractionProp"]
                    );
                  }
                }).apply(null, eventArgs);
              }}
              options={[
                { value: "option1", label: "Option 1" },
                { value: "option2", label: "Option 2" }
              ]}
              value={p.generateStateValueProp($state, ["select", "value"])}
            />
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  breachDashboard: ["breachDashboard", "text", "select"],
  text: ["text"],
  select: ["select"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  breachDashboard: "div";
  text: "div";
  select: typeof Select;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBreachDashboard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBreachDashboard__VariantsArgs;
    args?: PlasmicBreachDashboard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBreachDashboard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicBreachDashboard__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicBreachDashboard__ArgProps,
          internalVariantPropNames: PlasmicBreachDashboard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBreachDashboard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "breachDashboard") {
    func.displayName = "PlasmicBreachDashboard";
  } else {
    func.displayName = `PlasmicBreachDashboard.${nodeName}`;
  }
  return func;
}

export const PlasmicBreachDashboard = Object.assign(
  // Top-level PlasmicBreachDashboard renders the root element
  makeNodeComponent("breachDashboard"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    select: makeNodeComponent("select"),

    // Metadata about props expected for PlasmicBreachDashboard
    internalVariantProps: PlasmicBreachDashboard__VariantProps,
    internalArgProps: PlasmicBreachDashboard__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicBreachDashboard;
/* prettier-ignore-end */
